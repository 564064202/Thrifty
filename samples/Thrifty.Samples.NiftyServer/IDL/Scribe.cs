/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrifty.Samples
{
  public partial class Scribe {
    public interface Iface {
      ResultCode Log(List<LogEntry> messages);
      #if SILVERLIGHT
      IAsyncResult Begin_Log(AsyncCallback callback, object state, List<LogEntry> messages);
      ResultCode End_Log(IAsyncResult asyncResult);
      #endif
      List<LogEntry> getMessages();
      #if SILVERLIGHT
      IAsyncResult Begin_getMessages(AsyncCallback callback, object state);
      List<LogEntry> End_getMessages(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Log(AsyncCallback callback, object state, List<LogEntry> messages)
      {
        return send_Log(callback, state, messages);
      }

      public ResultCode End_Log(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Log();
      }

      #endif

      public ResultCode Log(List<LogEntry> messages)
      {
        #if !SILVERLIGHT
        send_Log(messages);
        return recv_Log();

        #else
        var asyncResult = Begin_Log(null, null, messages);
        return End_Log(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Log(AsyncCallback callback, object state, List<LogEntry> messages)
      #else
      public void send_Log(List<LogEntry> messages)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Log", TMessageType.Call, seqid_));
        Log_args args = new Log_args();
        args.Messages = messages;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultCode recv_Log()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Log_result result = new Log_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success.HasValue) {
          return result.Success.Value;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Log failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessages(AsyncCallback callback, object state)
      {
        return send_getMessages(callback, state);
      }

      public List<LogEntry> End_getMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessages();
      }

      #endif

      public List<LogEntry> getMessages()
      {
        #if !SILVERLIGHT
        send_getMessages();
        return recv_getMessages();

        #else
        var asyncResult = Begin_getMessages(null, null);
        return End_getMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessages(AsyncCallback callback, object state)
      #else
      public void send_getMessages()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessages", TMessageType.Call, seqid_));
        getMessages_args args = new getMessages_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<LogEntry> recv_getMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessages_result result = new getMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessages failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Log"] = Log_Process;
        processMap_["getMessages"] = getMessages_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Log_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Log_args args = new Log_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Log_result result = new Log_result();
        result.Success = iface_.Log(args.Messages);
        oprot.WriteMessageBegin(new TMessage("Log", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessages_args args = new getMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessages_result result = new getMessages_result();
        result.Success = iface_.getMessages();
        oprot.WriteMessageBegin(new TMessage("getMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }

        
    public partial class Log_args : TBase
    {

      public List<LogEntry> Messages { get; set; }

      public Log_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Messages = new List<LogEntry>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      LogEntry _elem2;
                      _elem2 = new LogEntry();
                      _elem2.Read(iprot);
                      Messages.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Log_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Messages != null) {
            field.Name = "messages";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Messages.Count));
              foreach (LogEntry _iter3 in Messages)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Log_args(");
        bool __first = true;
        if (Messages != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Messages: ");
          __sb.Append(Messages);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }
        
    public partial class Log_result : TBase
    {

      /// <summary>
      /// 
      /// <seealso cref="ResultCode"/>
      /// </summary>
      public ResultCode? Success { get; set; }

      public Log_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = (ResultCode)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Log_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Success.Value);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Log_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

        
    public partial class getMessages_args : TBase
    {

      public getMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getMessages_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMessages_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

        
    public partial class getMessages_result : TBase
    {

      public List<LogEntry> Success { get; set; }

      public getMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<LogEntry>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      LogEntry _elem6;
                      _elem6 = new LogEntry();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getMessages_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (LogEntry _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getMessages_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
